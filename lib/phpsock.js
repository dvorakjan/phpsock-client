// TOOD public metody enterRoom, leaveRoom, getRoomUsers + zajistit interni ukladani stavu mistnosti

var PhpSock = function(wsuri, onconnect, onhangup, options) {
    var methods = {};
    var session = null;
    var sockjs;
    // Inject alternative transport layer - SockJS
    ab._construct = function(url, protocols){
      sockjs = new SockJS(url);
      return sockjs;
    };
    
    // Connect and pass callbacks 
    ab.connect(wsuri, function (sess) {
        session = sess;

        // Extend SockJS's onMessage generated by Autobahn
        var abOnMessage = sockjs.onmessage;
        sockjs.onmessage = function(a){
            // Parse server2client RPC calls - mode 98
            if (a.type == 'message' && a.data.substring(0,4) == '[98,') {
                var data = JSON.parse(a.data);
                if (typeof methods[data[2]] === 'function') {
                    var result = methods[data[2]](data[3]);
                    sess._send([99,data[1],result]);
                }
            } else {
                abOnMessage(a);
            }
        }

        // Add server -> client RPC call handler
        sess.on = function(method, callback) {
            methods[method] = callback;
        };
        sess.off = function(method) {
            delete methods[method];
        };

        sess.call('registerClientAlias', 'jan-dvorak');

        

        return onconnect(sess);
    },function (code, reason, detail) {
        session = null;
        return onhangup(code, reason, detail);
    }, {
        skipSubprotocolCheck : true
    });

    return {
        ifConnected : function(onConnectedCallback) {
            if (session !== null) {
                return onConnectedCallback(session);
            }
            return null;
        }
    };
};